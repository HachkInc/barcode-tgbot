from string import Template
from dotenv import load_dotenv
import os
import telebot
from telebot import types

load_dotenv()

token = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(token)

class User:
    def __init__(self, id, name):
        self.id = id
        self.name = name
        data = ['id', 'fullname', 'age', 'phoneNumber', 'event']
        for d in data:
            self.d = None


def get_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=False)
    about = types.KeyboardButton('About üë®üèª‚Äçüíª')
    info = types.KeyboardButton('You ‚ÑπÔ∏è')
    reg = types.KeyboardButton('Register üê£')
    markup.add(about, info, reg)
    return markup

@bot.message_handler(commands=['start'])
def start_message(msg):
    bot.send_message(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=get_markup())

@bot.message_handler(regexp='About üë®üèª‚Äçüíª')
def about_message(msg):
    bot.send_message(msg.chat.id, "–û –Ω–∞—Å: TODO.")

user_dict = {}

@bot.message_handler(regexp='Register üê£')
def reg_message(msg):
    keyboard= types.ReplyKeyboardRemove()
    bot.send_message(msg.chat.id, '–°—É–ø–µ—Ä', reply_markup=keyboard)
    question = '–ü—Ä–∏—Å—Ç—É–ø–∏–º! –í–∞—Å –∑–æ–≤—É—Ç ' + msg.from_user.full_name + '?'
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
    keyboard.add(key_yes)
    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
    keyboard.add(key_no)
    bot.send_message(msg.chat.id, text=question, reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.message.chat.id == msg.chat.id)
    def callback_worker(call):
        chat_id = call.message.chat.id
        if call.data == "yes":
            bot.edit_message_text(text=question, chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
            user_dict[chat_id] = User(chat_id, msg.from_user.full_name)
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
            bot.register_next_step_handler(msg, get_age)
        else:
            bot.edit_message_text(text=question, chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
            bot.send_message(chat_id, "–ê –∫–∞–∫ —Ç–æ–≥–¥–∞?")
            bot.register_next_step_handler(msg, get_name)


def get_name(msg):
    chat_id = msg.chat.id
    user_dict[chat_id] = User(chat_id, msg.text)
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    bot.register_next_step_handler(msg, get_age)


def get_age(msg):
    try:
        if msg.text != '/stop':
            user = user_dict[msg.chat.id]
            user.age = int(msg.text)
            if user.age < 0 or user.age > 120:
                msg = bot.send_message(user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
                bot.register_next_step_handler(msg, get_age)
            else:
                phone_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                req_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
                phone_keyboard.add(req_button)
                msg = bot.send_message(user.id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=phone_keyboard)
                bot.register_next_step_handler(msg, get_phone)

    except ValueError:
        msg = bot.send_message(user.id, '–¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /stop')
        bot.register_next_step_handler(msg, get_age)
    except KeyError:
        bot.send_message(user.id, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /reg')


def get_phone(msg):
    if msg.text != '/stop':
        try:
            user = user_dict[msg.chat.id]
            user.phoneNumber = msg.contact.phone_number
            bot.send_message(user.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=get_markup())
        except (ValueError, AttributeError):
            msg = bot.send_message(user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /stop')
            bot.register_next_step_handler(msg, get_phone)
        except KeyError:
            bot.send_message(user.id, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /reg')
    else:
        bot.send_message(msg.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞', reply_markup=get_markup())


def getData(user, title):
    t = Template('*$title* \n–ò–º—è: *$name* \n–í–æ–∑—Ä–∞—Å—Ç: *$age* \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *$phoneNumber*')
    return t.substitute({
        'title': title,
        'name': user.name,
        'age': user.age,
        'phoneNumber': user.phoneNumber
    })

@bot.message_handler(regexp='You ‚ÑπÔ∏è')
def info_message(msg):
    try:
        user = user_dict[msg.chat.id]
        bot.send_message(user.id, getData(user, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: '), parse_mode="Markdown")

    except Exception:
        bot.send_message(msg.chat.id, '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /reg')

@bot.message_handler(content_types=['text'])
def get_text_messages(msg):
    bot.send_message(msg.chat.id, '—Ö–µ–π', reply_markup=get_markup())


# bot.enable_save_next_step_handlers(delay=2)
# bot.load_next_step_handlers()

bot.polling(none_stop=True)
